import re
import os

PWN_PATH = os.path.join(os.path.dirname(__file__), '../gamemodes/forward.pwn')

def extract_enum_fields(content):
    match = re.search(r'enum\s+_:?pData\s*\{([^}]+)\}', content, re.DOTALL)
    if not match:
        print("❌ Could not find enum pData in the .pwn file.")
        return []
    enum_body = match.group(1)
    field_pattern = re.compile(r'(?::\s*)?(p\w+)\b')
    return field_pattern.findall(enum_body)

def generate_field_function(fields):
    lines = ["// Auto-generated by tools/compilefields.py",
             "stock FieldFromName(const fieldName[]) {"]
    for field in fields:
        lines.append(f'    if (!strcmp(fieldName, "{field}", true)) return {field};')
    lines.append("    return -1;")
    lines.append("}")
    return "\n".join(lines) + "\n"

def replace_or_insert_function(content, function_code):
    # Match the existing FieldFromName() function
    pattern = re.compile(
        r'// Auto-generated by tools/compilefields\.py\nstock FieldFromName\(const fieldName\[\]\) \{.*?\n\}',
        re.DOTALL
    )

    if pattern.search(content):
        print("♻️  Replacing existing FieldFromName()")
        return pattern.sub(function_code.strip(), content)
    else:
        print("➕ Inserting new FieldFromName() at the bottom")
        return content.rstrip() + "\n\n" + function_code

def main():
    if not os.path.isfile(PWN_PATH):
        print(f"❌ .pwn file not found at {PWN_PATH}")
        return

    with open(PWN_PATH, 'r', encoding='utf-8') as f:
        content = f.read()

    fields = extract_enum_fields(content)
    if not fields:
        return

    function_code = generate_field_function(fields)
    updated_content = replace_or_insert_function(content, function_code)

    with open(PWN_PATH, 'w', encoding='utf-8') as f:
        f.write(updated_content)

    print("✅ FieldFromName() updated in forward.pwn")

if __name__ == "__main__":
    main()
